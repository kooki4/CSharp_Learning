// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bede.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BedeAPITests")]
    public partial class BedeAPITestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BedeAPITests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BedeAPITests", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new book and validate returned status and book details")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("1", "AuthorWithTwentyNineLettersss", "Title 1", "Test", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("2", "AuthorWithThirtyLetterssssssss", "Title 2", "Test", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("3", "AuthorWithThirtyOneLetterssssss", "Title 3", "Test", "BadRequest", null)]
        [NUnit.Framework.TestCaseAttribute("4", "Author with blank spaces", "Title 4", "Test", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("5", "Author H. Writer", "Title 5", "Test", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("6", "A.Symbols} @![\"#$%&\'()*+,-./]", "Title 6", "Description 4", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("7", "Author", "TitleWithNinetyNineCharactersAsASingleWorkTitleWithNinetyNineCharactersAsASingleW" +
            "orkTitleWithNinety", "Test Description", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("8", "Author", "Title With a Hundred Characters Title With a Hundred Characters Title With a Hund" +
            "red Charactersssss", "Test Description", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("9", "Author", "Title With a Hundred and One Characters Title With a Hundred and One Characters T" +
            "itle With a Hundredd", "Test Description", "BadRequest", null)]
        [NUnit.Framework.TestCaseAttribute("10", "Author", "Title with {symbols} @!\"#$%&\'()*+,-./", "Description 4", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("11", "Author", "TitleWithTwentyNice", @"Description with 256 letters. Description with 256 letters. Description with 256 letters. Description with 256 letters. Description with 256 letters. Description with 255 letters. Description with 256 letters. Description with 256 letters. Description with6", "OK", null)]
        public virtual void CreateNewBookAndValidateReturnedStatusAndBookDetails(string id, string author, string title, string description, string status, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new book and validate returned status and book details", null, @__tags);
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
 testRunner.Given(string.Format("I create a new book with parameters - {0}, {1}, {2} and {3}", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.Then(string.Format("system return a proper {0} with correct details of the book", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a book and verify it cannot be accessed")]
        [NUnit.Framework.TestCaseAttribute("1", "Author 12", "Title 12", "Description 12", "NoContent", null)]
        public virtual void DeleteABookAndVerifyItCannotBeAccessed(string id, string author, string title, string description, string status, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a book and verify it cannot be accessed", null, exampleTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 28
 testRunner.Given(string.Format("I create a new book with parameters - {0}, {1}, {2} and {3}", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.When("I delete the created book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then(string.Format("system return a proper {0} with correct details of the book", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
 testRunner.When("I try to access the book by <id>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.Then("system return a proper \"NotFound\" status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and update a book")]
        public virtual void CreateAndUpdateABook()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and update a book", null, ((string[])(null)));
#line 39
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 40
 testRunner.Given("I create a new book with parameters - 13, \"Author13\", \"Title13\" and \"Description1" +
                    "3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
    testRunner.When("I update the last created book with parameters - id 13, \"Updated Author\", \"This i" +
                    "s new title of the book.\" and \"Description of the UDPATED book.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.Then("the updated book details are coorect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Receive list of books matching the search term for Title")]
        public virtual void ReceiveListOfBooksMatchingTheSearchTermForTitle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receive list of books matching the search term for Title", null, ((string[])(null)));
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Author",
                        "Title",
                        "Description"});
            table1.AddRow(new string[] {
                        "1",
                        "Author",
                        "Test Title 14",
                        "Description of book 14"});
            table1.AddRow(new string[] {
                        "2",
                        "Author",
                        "Title of the Test",
                        "Description"});
            table1.AddRow(new string[] {
                        "3",
                        "Author J Oliver",
                        "TestTitle",
                        "Description"});
            table1.AddRow(new string[] {
                        "4",
                        "Author J Oliver",
                        "TitleOfTheTest",
                        "Description"});
            table1.AddRow(new string[] {
                        "5",
                        "Author J Oliver",
                        "TitleOfTestABC",
                        "Description"});
            table1.AddRow(new string[] {
                        "6",
                        "Author J Oliver",
                        "%20Test%",
                        "Description"});
            table1.AddRow(new string[] {
                        "7",
                        "Author J Oliver",
                        "\\Test\\Title",
                        "Description"});
            table1.AddRow(new string[] {
                        "8",
                        "Author J Oliver",
                        "$#!Test*&^%",
                        "Description"});
#line 45
 testRunner.Given("I create books with params", ((string)(null)), table1, "Given ");
#line 55
 testRunner.When("I search for a book \"Title\" with term \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.Then("the list of books from search result and registered books are the equal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Receive list of books matching the search term for Author")]
        public virtual void ReceiveListOfBooksMatchingTheSearchTermForAuthor()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receive list of books matching the search term for Author", null, ((string[])(null)));
#line 61
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Author",
                        "Title",
                        "Description"});
            table2.AddRow(new string[] {
                        "1",
                        "aztecAuthor\'Def",
                        "Test Title 14",
                        "Description of book 14"});
            table2.AddRow(new string[] {
                        "2",
                        "Author\\",
                        "Title of the Test",
                        "Description13"});
            table2.AddRow(new string[] {
                        "3",
                        "%20Author% J Oliver",
                        "TestTitle",
                        "Description13"});
            table2.AddRow(new string[] {
                        "4",
                        "$#!Test*&^% J Oliver",
                        "TitleOfTheTest",
                        "Description13"});
#line 62
 testRunner.Given("I create books with params", ((string)(null)), table2, "Given ");
#line 68
 testRunner.When("I search for a book \"Auhtor\" with term \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
 testRunner.Then("the list of books from search result and registered books are the equal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Receive list of books matching the search term for Description")]
        public virtual void ReceiveListOfBooksMatchingTheSearchTermForDescription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receive list of books matching the search term for Description", null, ((string[])(null)));
#line 71
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Author",
                        "Title",
                        "Description"});
            table3.AddRow(new string[] {
                        "1",
                        "aztecAuthor\'Def",
                        "Test Title 14",
                        "Description of book 14"});
            table3.AddRow(new string[] {
                        "2",
                        "Author\\",
                        "Title of the Test",
                        "Description13"});
            table3.AddRow(new string[] {
                        "3",
                        "%20Author% J Oliver",
                        "TestTitle",
                        "Description13"});
            table3.AddRow(new string[] {
                        "4",
                        "$#!Test*&^% J Oliver",
                        "TitleOfTheTest",
                        "Description13"});
#line 72
 testRunner.Given("I create books with params", ((string)(null)), table3, "Given ");
#line 78
 testRunner.When("I search for a book \"Auhtor\" with term \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
 testRunner.Then("the list of books from search result and registered books are the equal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Receive empty list of books - search with dummy or blank term")]
        public virtual void ReceiveEmptyListOfBooks_SearchWithDummyOrBlankTerm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receive empty list of books - search with dummy or blank term", null, ((string[])(null)));
#line 82
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Author",
                        "Title",
                        "Description"});
            table4.AddRow(new string[] {
                        "1",
                        "Author",
                        "Test Title 14",
                        "Description of book 14"});
            table4.AddRow(new string[] {
                        "2",
                        "Author",
                        "Title of the Test",
                        "Description13"});
            table4.AddRow(new string[] {
                        "3",
                        "Author J Oliver",
                        "TestTitle",
                        "Description13"});
#line 83
 testRunner.Given("I create books with params", ((string)(null)), table4, "Given ");
#line 88
 testRunner.When("I search with not existing book \"Title\" with term \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
 testRunner.Then("the list of books returned by the search result is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
 testRunner.When("I search for a book \"Title\" with term \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.Then("the list of books returned by the search result is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
 testRunner.When("I search for a book \"Author\" with term \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 93
 testRunner.Then("the list of books returned by the search result is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 94
 testRunner.When("I search for a book \"Author\" with term \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
 testRunner.Then("the list of books returned by the search result is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 96
 testRunner.When("I search for a book \"Description\" with term \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then("the list of books returned by the search result is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 98
 testRunner.When("I search for a book \"Description\" with term \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then("the list of books returned by the search result is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
