// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bede.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Libraray Management Tests")]
    public partial class LibrarayManagementTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BedeAPITests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Libraray Management Tests", "\tIn manage a library content\r\n\tAs a Library Manager\r\n\tI want to be able to Create" +
                    ", Update, Delete and Find books", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new book with valid data validate returned status and book details")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("1", "AuthorWithTwentyNineLettersss", "Title 1", "Description 1 Test", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("2", "AuthorWithThirtyLetterssssssss", "Title 2", "Description 2 Test", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("3", "AuthorWithThirtyOneLetterssssss", "Title 3", "Description 3 Test", "BadRequest", null)]
        [NUnit.Framework.TestCaseAttribute("4", "Author with blank spaces", "Title 4", "Description 4 Test", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("5", "A.{symbols} @![\"#$%&\'()*+,-./]", "Title 6", "Description 6 Test", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("6", "Author", "TitleWithNinetyNineCharactersAsASingleWorkTitleWithNinetyNineCharactersAsASingleW" +
            "orkTitleWithNinety", "Description 7 Test", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("7", "Author", "Title With a Hundred Characters Title With a Hundred Characters Title With a Hund" +
            "red Characterssssss", "Description 8 Test", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("8", "Author", "Title With a Hundred and One Characters Title With a Hundred and One Characters T" +
            "itle With a Hundredd", "Description 9 Test", "BadRequest", null)]
        [NUnit.Framework.TestCaseAttribute("9", "Author", "Title with {symbols} @!\"#$%&\'()*+,-./", "Description 10 Test", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("10", "Author", "TitleWithTwentyNice", "Description with {256} letters. \\Descr\\iption with 256 [lette]rs. Des", "OK", null)]
        public virtual void CreateNewBookWithValidDataValidateReturnedStatusAndBookDetails(string id, string author, string title, string description, string status, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new book with valid data validate returned status and book details", null, @__tags);
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
 testRunner.Given(string.Format("I create a new book with parameters - {0}, {1}, {2} and {3}", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.Then(string.Format("system return a proper {0} with correct details of the book", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new book without an author")]
        [NUnit.Framework.TestCaseAttribute("1", "", "Book Title", "Book Description", null)]
        public virtual void CreateNewBookWithoutAnAuthor(string id, string author, string title, string description, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new book without an author", null, exampleTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 27
 testRunner.Given(string.Format("I create a new book with parameters - {0}, {1}, {2} and {3}", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.Then("system return an author is required error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new book without a title")]
        [NUnit.Framework.TestCaseAttribute("1", "Author H Oliver", "", "Book Description", null)]
        public virtual void CreateNewBookWithoutATitle(string id, string author, string title, string description, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new book without a title", null, exampleTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 36
 testRunner.Given(string.Format("I create a new book with parameters - {0}, {1}, {2} and {3}", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
 testRunner.Then("system return a title is required error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new book without id")]
        [NUnit.Framework.TestCaseAttribute("-1", "Author", "Title", "", null)]
        [NUnit.Framework.TestCaseAttribute("0", "Author", "Title", "Description", null)]
        public virtual void CreateNewBookWithoutId(string id, string author, string title, string description, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new book without id", null, exampleTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 45
 testRunner.Given(string.Format("I create a new book with parameters - {0}, {1}, {2} and {3}", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
 testRunner.Then("system return a id is required error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a book and verify that it cannot be accessed")]
        [NUnit.Framework.TestCaseAttribute("1", "Author 1", "Title 1", "Description 1", "NoContent", "NotFound", null)]
        public virtual void DeleteABookAndVerifyThatItCannotBeAccessed(string id, string author, string title, string description, string status, string notFound, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a book and verify that it cannot be accessed", null, exampleTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 55
 testRunner.Given(string.Format("I create a new book with parameters - {0}, {1}, {2} and {3}", id, author, title, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
 testRunner.When("I delete the created book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.Then(string.Format("system return a proper {0} with correct details of the book", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
 testRunner.When("I try to access the book by <id>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.Then(string.Format("system return a proper {0} status", notFound), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create and update a book")]
        public virtual void CreateAndUpdateABook()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create and update a book", null, ((string[])(null)));
#line 66
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 67
 testRunner.Given("I create a new book with parameters - 13, \"Author13\", \"Title13\" and \"Description1" +
                    "3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
    testRunner.When("I update the last created book with parameters - id 13, \"Updated Author\", \"This i" +
                    "s new title of the book.\" and \"Description of the UDPATED book.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
 testRunner.Then("the updated book details are coorect", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Receive list of books matching the search term for Title")]
        public virtual void ReceiveListOfBooksMatchingTheSearchTermForTitle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receive list of books matching the search term for Title", null, ((string[])(null)));
#line 72
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Author",
                        "Title",
                        "Description"});
            table1.AddRow(new string[] {
                        "1",
                        "Author",
                        "Test Title 1",
                        "Description of book 1"});
            table1.AddRow(new string[] {
                        "2",
                        "Author",
                        "Title of the Test",
                        "Description"});
            table1.AddRow(new string[] {
                        "3",
                        "Author J Oliver",
                        "TestTitle",
                        "Description"});
            table1.AddRow(new string[] {
                        "4",
                        "Author J Oliver",
                        "TitleOfTheTest",
                        "Description"});
            table1.AddRow(new string[] {
                        "5",
                        "Author J Oliver",
                        "TitleOfTestABC",
                        "Description"});
            table1.AddRow(new string[] {
                        "6",
                        "Author J Oliver",
                        "%20Test",
                        "Description"});
            table1.AddRow(new string[] {
                        "7",
                        "Author J Oliver",
                        "\\Test\\Title",
                        "Description"});
            table1.AddRow(new string[] {
                        "8",
                        "Author J Oliver",
                        "$#!Test*&^%",
                        "Description"});
#line 73
 testRunner.Given("I create books with params", ((string)(null)), table1, "Given ");
#line 83
 testRunner.When("I search for a book \"Title\" with term \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.Then("the list of books from search result and registered books are equal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Receive list of books matching the search term for Author")]
        public virtual void ReceiveListOfBooksMatchingTheSearchTermForAuthor()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receive list of books matching the search term for Author", null, ((string[])(null)));
#line 87
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Author",
                        "Title",
                        "Description"});
            table2.AddRow(new string[] {
                        "1",
                        "aztecAuthor\'Def",
                        "Test Title 1",
                        "Description of Book 1"});
            table2.AddRow(new string[] {
                        "2",
                        "Author\\",
                        "Title of the Test",
                        "Description of Book  2"});
            table2.AddRow(new string[] {
                        "3",
                        "%20Author% J Oliver",
                        "TestTitle",
                        "Description of Book   3"});
            table2.AddRow(new string[] {
                        "4",
                        "$#!Test*&^% J Oliver",
                        "TitleOfTheTest",
                        "Description of Book    4"});
#line 88
 testRunner.Given("I create books with params", ((string)(null)), table2, "Given ");
#line 94
 testRunner.When("I search for a book \"Auhtor\" with term \"Author\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
 testRunner.Then("the list of books from search result and registered books are equal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Receive list of books matching the search term for Description")]
        public virtual void ReceiveListOfBooksMatchingTheSearchTermForDescription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receive list of books matching the search term for Description", null, ((string[])(null)));
#line 98
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Author",
                        "Title",
                        "Description"});
            table3.AddRow(new string[] {
                        "1",
                        "Autor D James",
                        "Test Title",
                        "TheStoryOfThisBook"});
            table3.AddRow(new string[] {
                        "2",
                        "Author",
                        "Title of Test Book",
                        "The \\Story of \\ this book"});
            table3.AddRow(new string[] {
                        "3",
                        "J Oliver",
                        "TestTitle",
                        "%20Story% of this book ."});
            table3.AddRow(new string[] {
                        "4",
                        "Oliver",
                        "TitleOfTheTest",
                        "$$%!@StoryB#o*o&k of Book"});
#line 99
 testRunner.Given("I create books with params", ((string)(null)), table3, "Given ");
#line 105
 testRunner.When("I search for a book \"Description\" with term \"Story\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
 testRunner.Then("the list of books from search result and registered books are equal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Receive empty list of books - search with dummy or blank term")]
        public virtual void ReceiveEmptyListOfBooks_SearchWithDummyOrBlankTerm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Receive empty list of books - search with dummy or blank term", null, ((string[])(null)));
#line 109
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Author",
                        "Title",
                        "Description"});
            table4.AddRow(new string[] {
                        "1",
                        "Author",
                        "Test Title 14",
                        "Description of book 14"});
            table4.AddRow(new string[] {
                        "2",
                        "Author",
                        "Title of the Test",
                        "Description 14"});
            table4.AddRow(new string[] {
                        "3",
                        "Author J Oliver",
                        "Amazing Birds",
                        "Description of the novel"});
#line 110
 testRunner.Given("I create books with params", ((string)(null)), table4, "Given ");
#line 115
 testRunner.When("I search for not existing book \"Title\" with term \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.Then("the list of books returned by the search result is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 117
 testRunner.When("I search for a book \"Title\" with term \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 118
 testRunner.Then("the list of books returned by the search result is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 119
 testRunner.When("I search for a book \"Author\" with term \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.Then("the list of books returned by the search result is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 121
 testRunner.When("I search for a book \"Author\" with term \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 122
 testRunner.Then("the list of books returned by the search result is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 123
 testRunner.When("I search for a book \"Description\" with term \"None\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 124
 testRunner.Then("the list of books returned by the search result is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 125
 testRunner.When("I search for a book \"Description\" with term \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 126
 testRunner.Then("the list of books returned by the search result is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
